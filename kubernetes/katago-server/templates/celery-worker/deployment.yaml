apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker-deployment
  namespace: serverspace
  labels:
    app: celery-worker
spec:
  replicas: {{.Values.celeryWorker.replicaCount}}
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: celery-worker
        image: {{.Values.django.image.repo}}:{{.Values.django.image.tag}}
        command: [ "/entrypoint", "/start-celeryworker"]
        envFrom:
        - secretRef:
            name: django-env-secrets
        - secretRef:
            # POSTGRES_USER and POSTGRES_PASSWORD
            name: postgres-env-secrets
        env:
        - name: POSTGRES_HOST
          value: {{.Values.database.dbIpAddressWithinContainer}}
        - name: POSTGRES_DB
          value: {{.Values.database.dbName}}
        - name: POSTGRES_PORT
          value: {{.Values.database.dbPort}}
        livenessProbe:
          exec:
            command:
            - "/entrypoint"
            - "/bin/bash"
            - "-c"
            - "celery inspect ping -A src.celery_app -d celery@$HOSTNAME"
          # celery inspect ping is actually quite expensive due to costly celery and python initialization!
          # Also maybe the worker is completely occupied by some task. So be very lenient - if the worker is
          # unresponsive then even this lenient config will eventually detect it.
          initialDelaySeconds: 60
          periodSeconds: 180
          timeoutSeconds: 20
          failureThreshold: 5
        volumeMounts:
        - name: django-fileserver-storage
          mountPath: /data
      - name: cloud-sql-proxy
        image: {{.Values.database.cloudsqlimage}}
        command:
        - "/cloud_sql_proxy"
        - "-ip_address_types=PRIVATE"
        - "--instances={{.Values.database.instanceConnectionName}}=tcp:{{.Values.database.dbPort}}"
        securityContext:
          runAsNonRoot: true
      volumes:
      - name: django-fileserver-storage
        persistentVolumeClaim:
          claimName: fileserver-claim
      serviceAccountName: {{.Values.serviceAccounts.cloudSqlStorage}}