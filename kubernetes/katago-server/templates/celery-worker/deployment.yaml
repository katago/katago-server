apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker-deployment
  namespace: serverspace
  labels:
    app: celery-worker
    app.kubernetes.io/component: celery-worker
    {{- include "katago-server.labels" . | nindent 4 }}
spec:
  replicas: {{.Values.celeryWorker.replicaCount}}
  selector:
    matchLabels:
      app: celery-worker
      {{- include "katago-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: celery-worker
        {{- include "katago-server.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/django_env_secrets: {{ include (print $.Template.BasePath "/env/django_env_secrets.yaml") . | sha256sum }}
        checksum/postgres_env_secrets: {{ include (print $.Template.BasePath "/env/postgres_env_secrets.yaml") . | sha256sum }}
        checksum/postgres_env_config: {{ include (print $.Template.BasePath "/env/postgres_env_config.yaml") . | sha256sum }}
    spec:
      containers:
      - name: celery-worker
        image: {{.Values.django.image.repo}}:{{.Values.django.image.tag}}
        command: [ "/entrypoint", "/start-celeryworker"]
        envFrom:
        - secretRef:
            name: django-env-secrets
        - secretRef:
            # POSTGRES_USER and POSTGRES_PASSWORD
            name: postgres-env-secrets
        - configMapRef:
            # POSTGRES_HOST, POSTGRES_DB, POSTGRES_PORT
            name: postgres-env-config
        livenessProbe:
          exec:
            command:
            - "/entrypoint"
            - "/bin/bash"
            - "-c"
            - "celery inspect ping -A src.celery_app -d celery@$HOSTNAME"
          # celery inspect ping is actually quite expensive due to costly celery and python initialization!
          # Also maybe the worker is completely occupied by some task. So be very lenient - if the worker is
          # unresponsive then even this lenient config will eventually detect it.
          initialDelaySeconds: 60
          periodSeconds: 180
          timeoutSeconds: 20
          failureThreshold: 5
        volumeMounts:
        - name: django-fileserver-storage
          mountPath: /data
          subPath: {{.Values.fileserver.subPath}}
      - name: cloud-sql-proxy
        image: {{.Values.database.cloudsqlimage}}
        command:
        - "/cloud_sql_proxy"
        - "-ip_address_types=PRIVATE"
        - "--instances=$(GCP_DATABASE_INSTANCE)=tcp:$(POSTGRES_PORT)"
        envFrom:
        - configMapRef:
            # GCP_DATABASE_INSTANCE and POSTGRES_PORT
            name: postgres-env-config
        securityContext:
          runAsNonRoot: true
      volumes:
      - name: django-fileserver-storage
        persistentVolumeClaim:
          claimName: fileserver-claim
      serviceAccountName: {{.Values.serviceAccounts.cloudSqlStorage}}
