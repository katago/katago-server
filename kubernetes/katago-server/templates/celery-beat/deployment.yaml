apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat-deployment
  namespace: {{.Values.global.namespace}}
  labels:
    app: celery-beat
    app.kubernetes.io/component: celery-beat
    {{- include "katago-server.labels" . | nindent 4 }}
spec:
  replicas: {{.Values.celeryBeat.replicaCount}}
  strategy:
    # mimic https://github.com/itswcg/django-helm/blob/master/templates/celery-beat/deployment.yaml
    # Presumably due to not wanting a chance of having multiple celery beats at a time
    # Celery continuous uptime is not essential in our server right now so also recreate is ok.
    type: Recreate
  selector:
    matchLabels:
      app: celery-beat
      {{- include "katago-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: celery-beat
        {{- include "katago-server.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/django_env_secrets: {{ include (print $.Template.BasePath "/env/django_env_secrets.yaml") . | sha256sum }}
        checksum/postgres_env_secrets: {{ include (print $.Template.BasePath "/env/postgres_env_secrets.yaml") . | sha256sum }}
        checksum/postgres_env_config: {{ include (print $.Template.BasePath "/env/postgres_env_config.yaml") . | sha256sum }}
    spec:
      containers:
      - name: celery-beat
        image: {{.Values.django.image.repo}}:{{.Values.django.image.tag}}
        command: [ "/entrypoint", "/start-celerybeat"]
        envFrom:
        - secretRef:
            name: django-env-secrets
        - secretRef:
            # POSTGRES_USER and POSTGRES_PASSWORD
            name: postgres-env-secrets
        - configMapRef:
            # POSTGRES_HOST, POSTGRES_DB, POSTGRES_PORT
            name: postgres-env-config
        # Unlike workers, celerybeat has no trivial liveness probe that we can tell, we just hope that if
        # it fails then the process itself will exit so the container will die, since container death
        # will always be noticed.
        # livenessProbe:
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
      serviceAccountName: {{.Values.serviceAccounts.cloudSqlStorage}}
